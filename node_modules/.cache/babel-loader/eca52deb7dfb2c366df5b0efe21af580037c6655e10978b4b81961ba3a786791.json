{"ast":null,"code":"var _jsxFileName = \"/Users/ishaanchamoli/Desktop/patient-chain/notes-app-ui/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper function to dynamically parse the raw record\nconst parseRawRecord = rawRecord => {\n  // First, replace single quotes with double quotes to make it a valid JSON string\n  const jsonString = rawRecord.replace(/\\'/g, '\"') // Convert single quotes to double quotes for JSON\n  .replace(/record/g, '') // Remove any 'record' references\n  .replace(/opt/g, '') // Remove any 'opt' references\n  .replace(/;/g, ',') // Replace semicolons with commas for JSON formatting\n  .replace(/\\(.*\\)/, '{}'); // Replace the brackets for empty objects\n\n  try {\n    const parsedData = JSON.parse(jsonString);\n\n    // Extract relevant fields from parsed data\n    return {\n      id: parsedData.patientID,\n      // Using patientID as the unique id\n      name: `${parsedData.name.first} ${parsedData.name.middle} ${parsedData.name.last}`.trim(),\n      allergies: JSON.parse(parsedData.medicalHistory).allergies.join(\", \"),\n      chronicConditions: JSON.parse(parsedData.medicalHistory).chronicConditions.join(\", \"),\n      surgeries: JSON.parse(parsedData.medicalHistory).surgeries.map(surgery => `${surgery.type} (${surgery.date})`).join(\", \"),\n      currentMedication: JSON.parse(parsedData.currentMedications)[0].medicationName,\n      dosage: JSON.parse(parsedData.currentMedications)[0].dosage,\n      frequency: JSON.parse(parsedData.currentMedications)[0].frequency\n    };\n  } catch (error) {\n    console.error(\"Error parsing record:\", error);\n    return null;\n  }\n};\nconst App = () => {\n  _s();\n  const rawRecord = `{\n    laboratoryResults: \"[{'testName': 'Lipid Panel', 'result': {'WBC': '4.7', 'RBC': '4.9', 'Hemoglobin': '17.5'}, 'date': '2024-02-10'}]\",\n    patientID: \"unique-patient-id-96\",\n    dateOfBirth: \"1952-11-27\",\n    name: { first: \"Dennis V May\", last: \"\", middle: \"\" },\n    emergencyContact: \"{'name': 'William Webb', 'relationship': 'Sibling', 'phone': '3564168487', 'email': 'mckenziechase@example.org'}\",\n    insuranceDetails: \"{'provider': 'Little, Smith and Ortega', 'policyNumber': 'H2175139308', 'coverageLimit': '$487672', 'coPay': '$16'}\",\n    medicalHistory: \"{'allergies': ['Peanuts', 'Shellfish'], 'chronicConditions': ['Diabetes'], 'surgeries': [{'type': 'Cataract Surgery', 'date': '2017-10-25'}], 'familyMedicalHistory': {'father': ['Heart Disease'], 'mother': []}, 'pastHospitalizations': [{'reason': 'Fracture', 'date': '2023-09-13', 'duration': '2 days'}]}\",\n    gender: \"Male\",\n    primaryPhysician: \"{'name': 'Dr. Ruth Price', 'contact': '(660)553-5609x2422', 'email': 'oadams@example.com'}\",\n    visitRecords: \"[{'visitID': 'visit-126', 'date': '2024-08-02', 'reason': 'Consultation', 'doctor': 'Dr. Ruth Price', 'hospital': 'Hospital 45', 'diagnosis': 'Improving'}]\",\n    currentMedications: \"[{'medicationName': 'Lisinopril', 'dosage': '498mg', 'frequency': 'Once daily'}]\",\n    contactInformation: \"{'email': 'james89@example.org', 'phone': '637.498.7284x236', 'address': {'street': '3130 Bradley Estate Apt. 875', 'city': 'Hernandezport', 'state': 'CO', 'zipCode': '31816'}}\"\n  }`;\n  const parsedNote = parseRawRecord(rawRecord);\n  const [notes, setNotes] = useState([{\n    id: 1,\n    name: \"John Doe\",\n    allergies: \"Peanuts, Pollen\",\n    chronicConditions: \"Asthma\",\n    surgeries: \"Appendectomy\",\n    currentMedication: \"Albuterol\",\n    dosage: \"2 puffs\",\n    frequency: \"Every 4 hours\"\n  }, parsedNote // Add the dynamically parsed note\n  ]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container bg-gray-900 h-screen p-8 overflow-hidden fixed inset-0 flex flex-col\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-6 mt-8 overflow-y-auto flex-grow\",\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-item bg-gray-800 p-6 rounded-lg shadow-lg hover:shadow-2xl transition-shadow cursor-pointer relative h-[300px] overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-blue-400\",\n          children: note.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Allergies: \", note.allergies]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Chronic Conditions: \", note.chronicConditions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Surgeries: \", note.surgeries]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Medication: \", note.currentMedication]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Dosage: \", note.dosage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-darkgrey mt-2\",\n          children: [\"Frequency: \", note.frequency]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OrIzZCSZuYcG9Oa1/6LeD2EqGIA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","parseRawRecord","rawRecord","jsonString","replace","parsedData","JSON","parse","id","patientID","name","first","middle","last","trim","allergies","medicalHistory","join","chronicConditions","surgeries","map","surgery","type","date","currentMedication","currentMedications","medicationName","dosage","frequency","error","console","App","_s","parsedNote","notes","setNotes","className","children","note","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ishaanchamoli/Desktop/patient-chain/notes-app-ui/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState } from \"react\";\n\ntype Note = {\n  id: number;\n  name: string;\n  allergies: string;\n  chronicConditions: string;\n  surgeries: string;\n  currentMedication: string;\n  dosage: string;\n  frequency: string;\n};\n\n// Helper function to dynamically parse the raw record\nconst parseRawRecord = (rawRecord: string) => {\n  // First, replace single quotes with double quotes to make it a valid JSON string\n  const jsonString = rawRecord\n    .replace(/\\'/g, '\"') // Convert single quotes to double quotes for JSON\n    .replace(/record/g, '') // Remove any 'record' references\n    .replace(/opt/g, '') // Remove any 'opt' references\n    .replace(/;/g, ',') // Replace semicolons with commas for JSON formatting\n    .replace(/\\(.*\\)/, '{}'); // Replace the brackets for empty objects\n\n  try {\n    const parsedData = JSON.parse(jsonString);\n\n    // Extract relevant fields from parsed data\n    return {\n      id: parsedData.patientID, // Using patientID as the unique id\n      name: `${parsedData.name.first} ${parsedData.name.middle} ${parsedData.name.last}`.trim(),\n      allergies: JSON.parse(parsedData.medicalHistory).allergies.join(\", \"),\n      chronicConditions: JSON.parse(parsedData.medicalHistory).chronicConditions.join(\", \"),\n      surgeries: JSON.parse(parsedData.medicalHistory).surgeries\n        .map((surgery: any) => `${surgery.type} (${surgery.date})`)\n        .join(\", \"),\n      currentMedication: JSON.parse(parsedData.currentMedications)[0].medicationName,\n      dosage: JSON.parse(parsedData.currentMedications)[0].dosage,\n      frequency: JSON.parse(parsedData.currentMedications)[0].frequency,\n    };\n  } catch (error) {\n    console.error(\"Error parsing record:\", error);\n    return null;\n  }\n};\n\nconst App = () => {\n  const rawRecord = `{\n    laboratoryResults: \"[{'testName': 'Lipid Panel', 'result': {'WBC': '4.7', 'RBC': '4.9', 'Hemoglobin': '17.5'}, 'date': '2024-02-10'}]\",\n    patientID: \"unique-patient-id-96\",\n    dateOfBirth: \"1952-11-27\",\n    name: { first: \"Dennis V May\", last: \"\", middle: \"\" },\n    emergencyContact: \"{'name': 'William Webb', 'relationship': 'Sibling', 'phone': '3564168487', 'email': 'mckenziechase@example.org'}\",\n    insuranceDetails: \"{'provider': 'Little, Smith and Ortega', 'policyNumber': 'H2175139308', 'coverageLimit': '$487672', 'coPay': '$16'}\",\n    medicalHistory: \"{'allergies': ['Peanuts', 'Shellfish'], 'chronicConditions': ['Diabetes'], 'surgeries': [{'type': 'Cataract Surgery', 'date': '2017-10-25'}], 'familyMedicalHistory': {'father': ['Heart Disease'], 'mother': []}, 'pastHospitalizations': [{'reason': 'Fracture', 'date': '2023-09-13', 'duration': '2 days'}]}\",\n    gender: \"Male\",\n    primaryPhysician: \"{'name': 'Dr. Ruth Price', 'contact': '(660)553-5609x2422', 'email': 'oadams@example.com'}\",\n    visitRecords: \"[{'visitID': 'visit-126', 'date': '2024-08-02', 'reason': 'Consultation', 'doctor': 'Dr. Ruth Price', 'hospital': 'Hospital 45', 'diagnosis': 'Improving'}]\",\n    currentMedications: \"[{'medicationName': 'Lisinopril', 'dosage': '498mg', 'frequency': 'Once daily'}]\",\n    contactInformation: \"{'email': 'james89@example.org', 'phone': '637.498.7284x236', 'address': {'street': '3130 Bradley Estate Apt. 875', 'city': 'Hernandezport', 'state': 'CO', 'zipCode': '31816'}}\"\n  }`;\n\n  const parsedNote = parseRawRecord(rawRecord);\n\n  const [notes, setNotes] = useState<Note[]>([\n    {\n      id: 1,\n      name: \"John Doe\",\n      allergies: \"Peanuts, Pollen\",\n      chronicConditions: \"Asthma\",\n      surgeries: \"Appendectomy\",\n      currentMedication: \"Albuterol\",\n      dosage: \"2 puffs\",\n      frequency: \"Every 4 hours\",\n    },\n    parsedNote // Add the dynamically parsed note\n  ]);\n\n  return (\n    <div className=\"app-container bg-gray-900 h-screen p-8 overflow-hidden fixed inset-0 flex flex-col\">\n      <div className=\"notes-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-6 mt-8 overflow-y-auto flex-grow\">\n        {notes.map((note) => (\n          <div\n            className=\"note-item bg-gray-800 p-6 rounded-lg shadow-lg hover:shadow-2xl transition-shadow cursor-pointer relative h-[300px] overflow-hidden\"\n            key={note.id}\n          >\n            <h2 className=\"text-xl font-bold text-blue-400\">{note.name}</h2>\n            <p className=\"text-darkgrey mt-2\">Allergies: {note.allergies}</p>\n            <p className=\"text-darkgrey mt-2\">Chronic Conditions: {note.chronicConditions}</p>\n            <p className=\"text-darkgrey mt-2\">Surgeries: {note.surgeries}</p>\n            <p className=\"text-darkgrey mt-2\">Medication: {note.currentMedication}</p>\n            <p className=\"text-darkgrey mt-2\">Dosage: {note.dosage}</p>\n            <p className=\"text-darkgrey mt-2\">Frequency: {note.frequency}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}